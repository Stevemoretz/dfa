{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","background","border","borderRadius","boxShadow","color","height","padding","buttonRemove","buttonSubmit","table","firstArray","secondArray","tempPrintArray","reachableNodes","App","classes","useState","selectedNodes","setSelectedNodes","finalStates","setFinalStates","equivalencySteps","setEquivalencySteps","handleChange","col","item","event","obj","zero","target","value","one","setReachableNodesToWorkWith","listOfNodes","setListOfNodes","printArrayContainingAsciis","a","arr","map","length","i","String","fromCharCode","JSON","stringify","replace","existsInTheSameObjectInFirstArray","item1","item2","element","indexOf","b","getArrayContaining","arraysAreEqual","checkNthEquivalency","itemF1","itemS1","zeroF1","zeroS1","zerosExistInFirstArray","cond1","oneF1","oneS1","onesExistInFirstArray","reachableNodesToWorkWith","useEffect","computeEquivalency","filter","zeroEquivalency","obj1","obj2","forEach","itemInArray","foundEquivalencyInSecondArray","index","itemS","weAreDone","checkIfIsFinalState","console","log","React","open","setOpen","handleClose","reason","lastTableRef","useRef","secondLastTableRef","current","scrollIntoView","behavior","className","style","backgroundColor","paddingTop","paddingBottom","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","message","action","Fragment","IconButton","size","aria-label","onClick","fontSize","Box","display","flexDirection","Typography","width","alignSelf","alignItems","justifyContent","Button","window","location","href","marginBottom","marginLeft","marginRight","variant","startIcon","lastItem","newSelectedNodes","Object","entries","key","splice","code","TableContainer","component","Paper","marginTop","minWidth","Table","TableHead","TableRow","TableCell","align","TableBody","toString","undefined","Select","labelId","id","onChange","bind","MenuItem","hasFinalStates","findUnreachableNodes","ref","reachable","fontWeight","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.148f19e3.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport './App.css';\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nimport CloseIcon from '@material-ui/icons/Close';\nimport BackspaceIcon from '@material-ui/icons/Backspace';\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport Box from \"@material-ui/core/Box\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport YouTubeIcon from '@material-ui/icons/YouTube';\nimport GitHubIcon from '@material-ui/icons/GitHub';\n\nconst useStyles = makeStyles({\n    root: {\n        background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n        border: 0,\n        borderRadius: 3,\n        boxShadow: '0 3px 5px 2px rgba(71,83,213,0.75)',\n        color: 'white',\n        height: 48,\n        padding: '0 30px',\n    },\n    buttonRemove:{\n        background: 'linear-gradient(45deg, purple 30%, red 90%)',\n        border: 0,\n        borderRadius: 3,\n        boxShadow: '0 3px 5px 2px rgba(212,0,82,0.58)',\n        color: 'white',\n        height: 48,\n        padding: '0 30px',\n    },\n    buttonSubmit:{\n        background: 'linear-gradient(45deg, green 30%, yellow 100%)',\n        border: 0,\n        borderRadius: 3,\n        boxShadow: '0 3px 5px 2px green',\n        color: 'white',\n        height: 48,\n        padding: '0 30px',\n    },\n    table :{\n        '& th , & td': {\n            border : '1px solid gray'\n        }\n    }\n});\n\nlet firstArray = [];\nlet secondArray = [];\nlet tempPrintArray = [];\nlet reachableNodes = [];\nfunction App() {\n    const classes = useStyles();\n    const [selectedNodes, setSelectedNodes] = useState({});\n    const [finalStates, setFinalStates] = useState({});\n    const [equivalencySteps, setEquivalencySteps] = useState([]);\n\n\n    const handleChange = (col,item,event) => {\n        let obj;\n        switch (col) {\n            case 0:\n                obj = {zero : event.target.value};\n                break;\n            case 1:\n                obj = {one : event.target.value};\n                break;\n        }\n        setEquivalencySteps([]);\n        setReachableNodesToWorkWith([]);\n        setSelectedNodes({...selectedNodes,[item]:{...selectedNodes[item],...obj}})\n    };\n\n    const [listOfNodes, setListOfNodes] = useState([]);\n    const getNextNodeAsciiCode = ()=>{return listOfNodes.length > 0 ? listOfNodes[listOfNodes.length-1] + 1 : 65;};\n\n    const onAddNewNode = () => {\n        setEquivalencySteps([]);\n        setReachableNodesToWorkWith([]);\n        const code = getNextNodeAsciiCode();\n        setSelectedNodes({...selectedNodes,[code]:{zero : code,one:code}});\n        setListOfNodes([...listOfNodes,code]);\n    };\n    const onRemoveLastNode = () => {\n        setEquivalencySteps([]);\n        setReachableNodesToWorkWith([]);\n        const lastItem = listOfNodes[listOfNodes.length-1];\n        let newSelectedNodes = {};\n        for(let [key,value] of Object.entries(selectedNodes)){\n            if(key !== lastItem){\n                if(value.one === lastItem){\n                    value = {...value,one : key}\n                }\n                if(value.zero === lastItem){\n                    value = {...value,zero : key}\n                }\n                newSelectedNodes = {...newSelectedNodes,[key]:value};\n            }\n        }\n        setFinalStates({...finalStates,[lastItem] : false});\n        setSelectedNodes(newSelectedNodes);\n        setListOfNodes(listOfNodes.splice(0,listOfNodes.length-1))\n    };\n\n    const printArrayContainingAsciis = (a) => {\n        if(!a)return '';\n        const arr = a.map((item)=>{\n            if(typeof item === 'object' && item.length) {\n                return item.map((i)=>{\n                    return String.fromCharCode(i);\n                });\n            }else{\n                return String.fromCharCode(item);\n            }\n        });\n        return JSON.stringify(arr).replace(/\"/g,'').replace(/\\[/g,'{').replace(/\\]/g,'}');\n    };\n\n    const existsInTheSameObjectInFirstArray = (item1,item2) => {\n        for (let element of firstArray) {\n            const a = element.indexOf(item1);\n            const b = element.indexOf(item2);\n            if(a > -1 || b > -1){return a > -1 && b > -1;}\n        }\n    };\n\n    const getArrayContaining = (item) => {\n        for (let element of secondArray) {\n            const a = element.indexOf(item);\n            if(a > -1)return element;\n        }\n    };\n\n    const arraysAreEqual = (a,b) => {\n        if(a === b) return true;\n        if(a === null || b === null) return false;\n        if(a.length !== b.length) return false;\n        for(let i = 0; i < a.length; ++i){\n            if(typeof a[i] === 'object' && a[i].length){\n                if(!arraysAreEqual(a[i],b[i])){return false}\n            }else{\n                if(a[i] !== b[i]) return false;\n            }\n        }\n        return true;\n    };\n\n    const checkNthEquivalency = (itemF1,itemS1) => {\n        // console.log('itemF1 : ' + itemF1);\n        // console.log('itemS1 : ' + itemS1);\n        const zeroF1 = selectedNodes[itemF1].zero;\n        const zeroS1 = selectedNodes[itemS1].zero;\n        const zerosExistInFirstArray = existsInTheSameObjectInFirstArray(zeroF1,zeroS1);\n        const cond1 = zeroF1 === zeroS1 || zerosExistInFirstArray;\n        const oneF1 = selectedNodes[itemF1].one;\n        const oneS1 = selectedNodes[itemS1].one;\n        const onesExistInFirstArray = existsInTheSameObjectInFirstArray(oneF1,oneS1);\n        const cond2 = oneF1 === oneS1 || onesExistInFirstArray;\n        return cond1 && cond2;\n    };\n\n    const findUnreachableNodes = (item = listOfNodes[0]) => {\n        if(item === listOfNodes[0]){reachableNodes = [item]}\n        const zero = selectedNodes[item].zero;\n        const one = selectedNodes[item].one;\n        if(reachableNodes.indexOf(zero) === -1){\n            reachableNodes = [...reachableNodes,zero];\n            findUnreachableNodes(zero);\n        }\n        if(reachableNodes.indexOf(one) === -1){\n            reachableNodes = [...reachableNodes,one];\n            findUnreachableNodes(one);\n        }\n    };\n\n    const [reachableNodesToWorkWith, setReachableNodesToWorkWith] = useState([]);\n\n    const startProcess = () => {\n        let hasFinalStates = false;\n        for(let [value] of Object.entries(finalStates)){\n            if(value){\n                hasFinalStates = true;\n                break;\n            }\n        }\n        if(hasFinalStates){\n            findUnreachableNodes();\n            setReachableNodesToWorkWith([...reachableNodes]);\n            reachableNodes = [];\n        }else{\n            setOpen(true);\n        }\n    };\n\n    useEffect(() => {\n        if(reachableNodesToWorkWith.length > 0){\n            computeEquivalency();\n            secondArray = secondArray.filter((item)=>item.length > 0);\n        }\n    }, [reachableNodesToWorkWith]);\n\n\n    const computeEquivalency = (zeroEquivalency = true) => {\n        if(zeroEquivalency){//Zero Equivalency First\n            let obj1 = [];\n            let obj2 = [];\n            reachableNodesToWorkWith.forEach((item)=>{\n                const finalState = finalStates[item];\n                if(finalState){\n                    obj1 = [...obj1,item];\n                }else{\n                    obj2 = [...obj2,item]\n                }\n            });\n            firstArray = [obj2,obj1];\n            secondArray = [];\n            tempPrintArray = [printArrayContainingAsciis(firstArray.filter((item)=>item.length > 0))];\n            computeEquivalency(false);\n        }else{\n            firstArray.forEach((item)=>{\n                if(item.length > 1){\n                    item.forEach((itemInArray)=>{\n                        let foundEquivalencyInSecondArray = false;\n                        let index = 0;\n                        for (let itemS of secondArray) {\n                            foundEquivalencyInSecondArray = checkNthEquivalency(itemInArray,itemS[0]);\n                            if(foundEquivalencyInSecondArray)break;\n                            index++;\n                        }\n                        if(foundEquivalencyInSecondArray){\n                            secondArray[index] = [...secondArray[index],itemInArray]\n                        }else{\n                            secondArray = [...secondArray,[itemInArray]];\n                        }\n                    });\n                }else{\n                    secondArray = [...secondArray,item];\n                }\n            });\n            const weAreDone = arraysAreEqual(secondArray, firstArray);\n            if(weAreDone){\n                setEquivalencySteps([...tempPrintArray]);\n                tempPrintArray = [];\n            }else{\n                tempPrintArray = [...tempPrintArray,printArrayContainingAsciis(secondArray.filter((item)=>item.length > 0))];\n                firstArray = secondArray;\n                secondArray = [];\n                computeEquivalency(false)\n            }\n        }\n    };\n\n    const checkIfIsFinalState = (arr) => {\n        for(let obj of arr){\n            console.log(obj);\n            if(!!finalStates[obj])return true;\n        }\n        return false;\n    };\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClose = (event, reason) => {\n        setOpen(false);\n    };\n\n    const lastTableRef = useRef();\n    const secondLastTableRef = useRef();\n\n    useEffect(() => {\n        if(secondLastTableRef.current){\n            secondLastTableRef.current.scrollIntoView({behavior : 'smooth'})\n        }else if(lastTableRef.current){\n            // lastTableRef.current.scrollIntoView({behavior : 'smooth'})\n        }\n    }, [equivalencySteps,reachableNodesToWorkWith]);\n\n\n    return (\n        <div className=\"App\" style={{backgroundColor : '#4d4d4d',paddingTop : 50,paddingBottom : 80}}>\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n                open={open}\n                autoHideDuration={6000}\n                onClose={handleClose}\n                message=\"لطفا با کلیک روی حروف الفبا (در ستون نود) خانه های نهایی را تعیین کنید.\"\n                action={\n                    <React.Fragment>\n                        <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n                            <CloseIcon fontSize=\"small\" />\n                        </IconButton>\n                    </React.Fragment>\n                }\n            />\n            <Box display=\"flex\" flexDirection=\"column\">\n                <Typography style={{color : 'white',fontSize : 42}}>Dfa Reduction</Typography>\n                <Box style={{width : '80%',backgroundColor : 'rgba(255,255,255,0.5)',height : 2,alignSelf : 'center'}}/>\n                <Box display=\"flex\" flexDirection=\"column\" alignItems='center' justifyContent='center'>\n                    <Button onClick={()=>{\n                        window.location.href = 'https://www.youtube.com/watch?v=0XaGAkY09Wc'\n                    }} style={{marginBottom : 2}}>\n                        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n                            <Typography style={{color : 'white',fontSize : 15}}>الگوریتم بر اساس توضیحات ویدو های کانال</Typography>\n                            <YouTubeIcon style={{color : 'red',marginLeft : 5,fontSize : 35}}/>\n                        </Box>\n                    </Button>\n                    <Button onClick={()=>{\n                        window.location.href = 'https://gitlab.com/sm.steve.moretz/dfa'\n                    }} style={{marginBottom : 5}}>\n                        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\" style={{marginLeft : 58}}>\n                            <Typography style={{color : 'white',fontSize : 15}}>مشاهده سورس کد ها در گیت لب</Typography>\n                            <GitHubIcon style={{color : 'white',marginLeft : 7,fontSize : 28}}/>\n                        </Box>\n                    </Button>\n                </Box>\n                <Box style={{width : '80%',backgroundColor : 'rgba(255,255,255,0.5)',height : 2,alignSelf : 'center',marginBottom : 20}}/>\n                <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" alignSelf='center'>\n                    <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n                        <Box display='flex' style={{marginRight : 8}}>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                startIcon={<BackspaceIcon/>}\n                                className={classes.buttonRemove}\n                                onClick={onRemoveLastNode}\n                            >\n                                پاک کردن نود\n                            </Button>\n                        </Box>\n                        <Box display='flex'>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                startIcon={<AddBoxIcon/>}\n                                className={classes.root}\n                                onClick={onAddNewNode}\n                            >\n                                اضافه کردن نود\n                            </Button>\n                        </Box>\n                    </Box>\n                    <TableContainer component={Paper} style={{marginTop : 5,minWidth : 300}}>\n                        <Table aria-label=\"simple table\" className={classes.table}>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"center\">نود</TableCell>\n                                    <TableCell align=\"center\">۰</TableCell>\n                                    <TableCell align=\"center\">۱</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {\n                                    listOfNodes.map((item)=>{\n                                        return <TableRow key={item.toString()}>\n                                            <TableCell align=\"center\">\n                                                <Button onClick={()=>{\n                                                    setEquivalencySteps([]);\n                                                    setReachableNodesToWorkWith([]);\n                                                    setFinalStates({...finalStates,[item]:!finalStates[item]})\n                                                }} style={{borderRadius : 35,width : 70,height : 70,border : finalStates[item] ? '1px solid purple':undefined}}>\n                                                    <Box style={{width : 50,height :50,borderRadius : 25,border : finalStates[item] ? '1px solid purple':undefined}} display='flex' alignItems='center' justifyContent='center'>\n                                                        <Typography>{String.fromCharCode(item)}</Typography>\n                                                    </Box>\n                                                </Button>\n                                            </TableCell>\n                                            <TableCell align=\"center\">\n                                                <Select\n                                                    labelId=\"demo-simple-select-helper-label\"\n                                                    id=\"demo-simple-select-helper\"\n                                                    value={selectedNodes[item].zero}\n                                                    onChange={handleChange.bind(this,0,item)}\n                                                >\n                                                    {\n                                                        listOfNodes.map((i)=>{\n                                                            return (\n                                                                <MenuItem key={i.toString()} value={i}>{String.fromCharCode(i)}</MenuItem>\n                                                            )\n                                                        })\n                                                    }\n                                                </Select>\n                                            </TableCell>\n                                            <TableCell align=\"center\">\n                                                <Select\n                                                    labelId=\"demo-simple-select-helper-label\"\n                                                    id=\"demo-simple-select-helper\"\n                                                    value={selectedNodes[item].one}\n                                                    onChange={handleChange.bind(this,1,item)}\n                                                >\n                                                    {\n                                                        listOfNodes.map((i)=>{\n                                                            return (\n                                                                <MenuItem key={i.toString()} value={i}>{String.fromCharCode(i)}</MenuItem>\n                                                            )\n                                                        })\n                                                    }\n                                                </Select>\n                                            </TableCell>\n                                        </TableRow>\n                                    })\n                                }\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.buttonSubmit}\n                        onClick={startProcess}\n                        style={{marginTop : 10,width : '100%'}}\n                    >\n                        محاسبه\n                    </Button>\n                    {\n                        (0<reachableNodesToWorkWith.length) && (reachableNodesToWorkWith.length < listOfNodes.length) && (\n                            <Typography ref={secondLastTableRef} style={{color : 'white',marginTop : 20}}>شامل نود های دست نیافتی است که آن ها را حذف میکنیم</Typography>\n                        )\n                    }\n                    {\n                        (0<reachableNodesToWorkWith.length) && (reachableNodesToWorkWith.length === listOfNodes.length) && (\n                            <Typography ref={secondLastTableRef} style={{color : 'white',marginTop : 20}}>شامل نود های دست نیافتی نیست پس نیازی به حذف هیچ نودی نیست</Typography>\n                        )\n                    }\n                    {\n                        (0<reachableNodesToWorkWith.length) && (reachableNodesToWorkWith.length < listOfNodes.length) && (\n                            <TableContainer component={Paper} style={{marginTop : 20,minWidth : 300}}>\n                                <Table aria-label=\"simple table\" className={classes.table}>\n                                    <TableHead>\n                                        <TableRow>\n                                            <TableCell align=\"center\">نود</TableCell>\n                                            <TableCell align=\"center\">۰</TableCell>\n                                            <TableCell align=\"center\">۱</TableCell>\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {\n                                            listOfNodes.map((item,index)=>{\n                                                const reachable = reachableNodesToWorkWith.indexOf(item) > -1;\n                                                return <TableRow key={index.toString()} style={{backgroundColor : reachable ? '' : 'pink'}}>\n                                                    <TableCell align=\"center\">\n                                                        <Button onClick={()=>{}} style={{borderRadius : 35,width : 70,height : 70,border : finalStates[item[0]] ? '1px solid purple':undefined}}>\n                                                            <Box style={{width : 50,height :50,borderRadius : 25,border : finalStates[item[0]] ? '1px solid purple':undefined}} display='flex' alignItems='center' justifyContent='center'>\n                                                                {reachable ? (\n                                                                    <Typography>{String.fromCharCode(item)}</Typography>\n                                                                ):(\n                                                                    <Typography style={{color : 'red'}}><del>{String.fromCharCode(item)}</del></Typography>\n                                                                )}\n                                                            </Box>\n                                                        </Button>\n                                                    </TableCell>\n                                                    <TableCell align=\"center\">\n                                                        {reachable ? (\n                                                            <Typography>{String.fromCharCode(selectedNodes[item].zero)}</Typography>\n                                                        ):(\n                                                            <Typography style={{color : 'red'}}><del>{String.fromCharCode(selectedNodes[item].zero)}</del></Typography>\n                                                        )}\n                                                    </TableCell>\n                                                    <TableCell align=\"center\">\n                                                        {reachable ? (\n                                                            <Typography>{String.fromCharCode(selectedNodes[item].one)}</Typography>\n                                                        ):(\n                                                            <Typography style={{color : 'red'}}><del>{String.fromCharCode(selectedNodes[item].one)}</del></Typography>\n                                                        )}\n                                                    </TableCell>\n                                                </TableRow>\n                                            })\n                                        }\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n                        )\n                    }\n                    {\n                        equivalencySteps.map((item,index)=>{\n                            return <Typography key={index.toString()} style={{color : 'white',marginTop : index === 0 ? 50 : 10,fontSize : 15,fontWeight : 'bold'}}>{item} = {index} هم سنگی </Typography>\n                        })\n                    }\n                    {\n                        equivalencySteps.length > 0 && (\n                            <TableContainer ref={lastTableRef} component={Paper} style={{marginTop : 50,minWidth : 300}}>\n                                    <Table aria-label=\"simple table\" className={classes.table}>\n                                        <TableHead>\n                                            <TableRow>\n                                                <TableCell align=\"center\">نود</TableCell>\n                                                <TableCell align=\"center\">۰</TableCell>\n                                                <TableCell align=\"center\">۱</TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            {\n                                                secondArray.map((item,index)=>{\n                                                    return <TableRow key={index.toString()}>\n                                                        <TableCell align=\"center\">\n                                                            <Button onClick={()=>{}} style={{borderRadius : 35,width : 70,height : 70,border : checkIfIsFinalState(item) ? '1px solid purple':undefined}}>\n                                                                <Box style={{width : 50,height :50,borderRadius : 25,border : finalStates[item[0]] ? '1px solid purple':undefined}} display='flex' alignItems='center' justifyContent='center'>\n                                                                    <Typography>{printArrayContainingAsciis(item)}</Typography>\n                                                                </Box>\n                                                            </Button>\n                                                        </TableCell>\n                                                        <TableCell align=\"center\">\n                                                            <Typography>{printArrayContainingAsciis(getArrayContaining(selectedNodes[item[0]].zero))}</Typography>\n                                                        </TableCell>\n                                                        <TableCell align=\"center\">\n                                                            <Typography>{printArrayContainingAsciis(getArrayContaining(selectedNodes[item[0]].one))}</Typography>\n                                                        </TableCell>\n                                                    </TableRow>\n                                                })\n                                            }\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n                        )\n                    }\n                </Box>\n            </Box>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}